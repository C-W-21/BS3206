-- MySQL Script generated by MySQL Workbench
-- Thu May  2 16:04:59 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema rt
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema rt
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `rt` ;
-- -----------------------------------------------------
-- Schema ims
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema ims
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `ims` ;
-- -----------------------------------------------------
-- Schema login
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema login
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `login` ;
USE `rt` ;

-- -----------------------------------------------------
-- Table `rt`.`saved_routes_meta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rt`.`saved_routes_meta` (
  `id` INT(6) ZEROFILL NOT NULL AUTO_INCREMENT,
  `time_generated` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `occupants` INT NOT NULL,
  `src` POINT NOT NULL,
  `dest` POINT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `time_generated_UNIQUE` (`time_generated` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rt`.`saved_routes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rt`.`saved_routes` (
  `id` INT(6) NOT NULL AUTO_INCREMENT,
  `meta_id` INT(6) ZEROFILL NULL,
  `mode` ENUM('drive', 'light_truck', 'medium_truck', 'truck', 'heavy_truck', 'truck_dangerous_goods', 'long_truck') NULL,
  `units` ENUM('metric', 'imperial') NULL,
  `traffic` ENUM('free_flow', 'approximated') NULL,
  `distance` INT NULL,
  `distance_units` VARCHAR(25) NULL,
  `time` DECIMAL(9,3) NULL,
  `waypoints` MULTIPOINT NULL,
  `route` MULTILINESTRING NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_meta_id_idx` (`meta_id` ASC) VISIBLE,
  CONSTRAINT `fk_meta_id`
    FOREIGN KEY (`meta_id`)
    REFERENCES `rt`.`saved_routes_meta` (`id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ims`.`vehicle_specifications`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ims`.`vehicle_specifications` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `brand` VARCHAR(255) NOT NULL,
  `model` VARCHAR(255) NOT NULL,
  `emissions` DECIMAL(6,2) NOT NULL,
  `occupancy` INT NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `ims`.`vehicles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ims`.`vehicles` (
  `license_plate` VARCHAR(8) NOT NULL,
  `specifications_id` INT NOT NULL,
  PRIMARY KEY (`license_plate`),
  INDEX `fk_specifications_id_idx` (`specifications_id` ASC) INVISIBLE,
  UNIQUE INDEX `license_plate_UNIQUE` (`license_plate` ASC) VISIBLE,
  CONSTRAINT `fk_specifications_id`
    FOREIGN KEY (`specifications_id`)
    REFERENCES `ims`.`vehicle_specifications` (`id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `rt`.`route_vehicles`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `rt`.`route_vehicles` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `route_id` INT NOT NULL,
  `vehicle_id` VARCHAR(8) NOT NULL,
  `emissions` DECIMAL(6,2) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE,
  INDEX `fk_route_id_idx` (`route_id` ASC) VISIBLE,
  INDEX `fk_vehicle_id_idx` (`vehicle_id` ASC) VISIBLE,
  CONSTRAINT `fk_route_id`
    FOREIGN KEY (`route_id`)
    REFERENCES `rt`.`saved_routes` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_vehicle_id`
    FOREIGN KEY (`vehicle_id`)
    REFERENCES `ims`.`vehicles` (`license_plate`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `ims` ;
USE `login` ;

-- -----------------------------------------------------
-- Table `login`.`login`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `login`.`login` (
  `id` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(255) NOT NULL,
  `password` VARCHAR(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC) VISIBLE,
  UNIQUE INDEX `id_UNIQUE` (`id` ASC) VISIBLE)
ENGINE = InnoDB;

USE `rt` ;

-- -----------------------------------------------------
-- procedure create_route_meta
-- -----------------------------------------------------

DELIMITER $$
USE `rt`$$
CREATE PROCEDURE `create_route_meta` (IN occupants INT, IN src POINT, IN dest POINT)
BEGIN
	INSERT INTO rt.saved_routes_meta (occupants, src, dest)
    VALUES (occupants, src, dest);
    
    SELECT last_insert_id() AS meta_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure create_route
-- -----------------------------------------------------

DELIMITER $$
USE `rt`$$
CREATE PROCEDURE `create_route` (
	IN meta_id INT(6), 
    IN mode VARCHAR(255), 
    IN units VARCHAR(255), 
    IN traffic VARCHAR(255),
    IN distance INT,
    IN distance_units VARCHAR(25),
    IN time DECIMAL(9, 3),
    IN waypoints MULTIPOINT,
    IN route MULTILINESTRING
)
BEGIN
	INSERT INTO rt.saved_routes (meta_id, mode, units, traffic, distance, distance_units, time, waypoints, route)
    VALUES (meta_id, mode, units, traffic, distance, distance_units, time, waypoints, route);
    
    SELECT last_insert_id() AS route_id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure create_route_vehicle
-- -----------------------------------------------------

DELIMITER $$
USE `rt`$$
CREATE PROCEDURE `create_route_vehicle` (IN route_id INT, IN license_plate VARCHAR(8), IN emissions DECIMAL(6, 2))
BEGIN
	INSERT INTO rt.route_vehicles (route_id, vehicle_id, emissions)
    VALUES (route_id, license_plate, emissions);
    
    SELECT last_insert_id() AS id;
END$$

DELIMITER ;
USE `ims` ;

-- -----------------------------------------------------
-- Placeholder table for view `ims`.`vehicles_utility_specifications`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `ims`.`vehicles_utility_specifications` (`license_plate` INT, `emissions` INT, `occupancy` INT);

-- -----------------------------------------------------
-- procedure UpdateVehicle
-- -----------------------------------------------------

DELIMITER $$
USE `ims`$$
CREATE PROCEDURE `UpdateVehicle` (cid int, brand varchar(255), model varchar(255), emissions decimal(4,2), occupancy int)
BEGIN
if id is null
	THEN
    INSERT INTO vehicle_specifications(brand, model, emissions, occupancy)
    VALUES (brand, model, emissions, occupancy);
else
	UPDATE vehicle_specifications
    SET brand=brand, model=model, emissions=emissions, occupancy=occupancy
    Where id=cid;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RetrieveVehicle
-- -----------------------------------------------------

DELIMITER $$
USE `ims`$$
CREATE PROCEDURE `RetrieveVehicle` ()
BEGIN
	SELECT * FROM ims.vehicle_specifications;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RetrieveVehicleByID
-- -----------------------------------------------------

DELIMITER $$
USE `ims`$$
CREATE PROCEDURE `RetrieveVehicleByID` (rh int)
BEGIN
	SELECT * FROM ims.vehicle_specifications
    Where rh=id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure CreateVehicle
-- -----------------------------------------------------

DELIMITER $$
USE `ims`$$
CREATE PROCEDURE `CreateVehicle` (license varchar(8), rh int)
BEGIN
	INSERT INTO vehicles(license_plate, specifications_id)
    VALUES (license, rh);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RetrieveJoinedVehicles
-- -----------------------------------------------------

DELIMITER $$
USE `ims`$$
CREATE PROCEDURE `RetrieveJoinedVehicles` ()
BEGIN
SELECT *
FROM vehicles
JOIN vehicle_specifications ON vehicles.specifications_id = vehicle_specifications.id;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure DeleteVehicle
-- -----------------------------------------------------

DELIMITER $$
USE `ims`$$
CREATE PROCEDURE `DeleteVehicle` (license VARCHAR(8))
BEGIN
DELETE FROM vehicles
WHERE license_plate = license;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `ims`.`vehicles_utility_specifications`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `ims`.`vehicles_utility_specifications`;
USE `ims`;
CREATE  OR REPLACE VIEW `vehicles_utility_specifications` AS
	SELECT 
		v.license_plate,
        vs.emissions,
        vs.occupancy
    FROM vehicles AS v
    INNER JOIN vehicle_specifications AS vs ON vs.id = v.specifications_id;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
